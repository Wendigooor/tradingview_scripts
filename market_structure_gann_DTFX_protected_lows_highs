// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © meomeo105 + wendigooor
// Gann Swing Chart version 3.0
//@version=5
indicator('Market Structure | DTFX [@wendigooor]', overlay=true, max_lines_count=500, max_boxes_count = 500, max_labels_count = 500, max_bars_back = 5000)

//

DefaultGannMLSetting = "[Gann][SGann][Color][ChoCh Gann][ChoCh SGann]"
showF1GannML = input.bool(false,"", group = DefaultGannMLSetting,inline = "showF1GannML")
showSF1GannML = input.bool(true,"F1", group = DefaultGannMLSetting,inline = "showF1GannML")
colorF1GannML = input.color(color.black, '', group = DefaultGannMLSetting,inline = "showF1GannML")
showChoChF1GannML = input.bool(false,"", group = DefaultGannMLSetting,inline = "showF1GannML")
showChoChSF1GannML = input.bool(true,"", group = DefaultGannMLSetting,inline = "showF1GannML")

showF2GannML = false // input.bool(false,"", group = DefaultGannMLSetting,inline = "showF2GannML")
showSF2GannML = false // input.bool(false,"F2", group = DefaultGannMLSetting,inline = "showF2GannML")
colorF2GannML = color.yellow // input.color(color.yellow, '', group = DefaultGannMLSetting,inline = "showF2GannML")
showChoChF2GannML = false // input.bool(false,"", group = DefaultGannMLSetting,inline = "showF2GannML")
showChoChSF2GannML = false // input.bool(false,"", group = DefaultGannMLSetting,inline = "showF2GannML")

showF3GannML = false // input.bool(false,"", group = DefaultGannMLSetting,inline = "showF3GannML")
showSF3GannML = false // input.bool(false,"F3", group = DefaultGannMLSetting,inline = "showF3GannML")
colorF3GannML = color.purple // input.color(color.purple, '', group = DefaultGannMLSetting,inline = "showF3GannML")
showChoChF3GannML = false // input.bool(false,"", group = DefaultGannMLSetting,inline = "showF3GannML")
showChoChSF3GannML = false // input.bool(false,"", group = DefaultGannMLSetting,inline = "showF3GannML")

lineWidth = input.int(3, 'Line Width', group = "style", inline = "style")

drawMiddleLine = input.bool(true, 'Draw 50% line?', group = "style", inline = "style1")
middlelineLength = input.int(20, '50% Line Length', group = "style", inline = "style1")
bullColor = input.color(color.blue, 'Bull Color', group = "style", inline = "style2")
bearColor = input.color(color.red, 'Bear Color', group = "style", inline = "style2")
drawRectangles = input.bool(true, 'Draw rectangles?', group = "style", inline = "style3")
rectangleOpacity = input.int(85, 'Rectangle Opacity', group = "style", inline = "style3")

solidLineWidth = lineWidth
dottedLineWidth = lineWidth
dashedLineWidth = lineWidth

drawMarketDirection = input.bool(false, 'Draw market direction?', group = "funct")
pullbackWithCloseBar = input.bool(false, 'Use Close bar for Pullback calculation?', group = "funct")
minErrorMeasurementPoints = input.float(4, 'Ticks numb to skip for BoS/CHoCH validation', group = 'Min Meausurement Ticks Error (avoid Equal Highs/Lows)') * syminfo.mintick
minErrorMeasurementPointsHighsLows = input.float(4, 'Ticks numb to skip for Highs/Lows', group = 'Min Meausurement Ticks Error (avoid Equal Highs/Lows)') * syminfo.mintick
useMeasurementPointsErrorsForBosDrawings = input.bool(false, 'Use Meausurement Points Errors for BOS Drawings?')
useWicksForFlip = input.bool(false, 'Use Wicks For Flips? (draw 50% line on each zone)')

customOpen = open
customClose = close
customHigh = high
customLow = low




f_CalculateF0(_pointX,_pointY,arrayX0,arrayY0)=>
	array.unshift(arrayX0,_pointX)
	array.unshift(arrayY0,_pointY)
	[1]

f_CalculateFn1(_pointX,_pointY,arrayXn,arrayYn,arrayXFn1,arrayYFn1)=>
	//_resultdraw 2:Tiếp tục 1:Đảo chiều
	int _resultdraw = 0
	//OSB pha dinh/day
	if((array.get(arrayYFn1,0) >= array.get(arrayYFn1,1) and array.get(arrayYn,0) < array.get(arrayYFn1,1)) or (array.get(arrayYFn1,0) <= array.get(arrayYFn1,1) and array.get(arrayYn,0) > array.get(arrayYFn1,1)))
		array.unshift(arrayXFn1,_pointX)
	    array.unshift(arrayYFn1,_pointY)
		_resultdraw := 1
	//Dao chieu sang giam
	else if(array.get(arrayYFn1,0) >= array.get(arrayYFn1,1) and (array.get(arrayYn,0) < array.get(arrayYn,1) and array.get(arrayYn,0) < array.get(arrayYn,2) and array.get(arrayYn,1) < array.get(arrayYn,3)) and array.get(arrayYn,2) < array.get(arrayYn,3))
		array.unshift(arrayXFn1,_pointX)
	    array.unshift(arrayYFn1,_pointY)
		_resultdraw := 1
	//Dao chieu sang tang
	else if(array.get(arrayYFn1,0) <= array.get(arrayYFn1,1) and (array.get(arrayYn,0) > array.get(arrayYn,1) and array.get(arrayYn,0) > array.get(arrayYn,2) and array.get(arrayYn,1) > array.get(arrayYn,3)) and array.get(arrayYn,2) > array.get(arrayYn,3))
		array.unshift(arrayXFn1,_pointX)
	    array.unshift(arrayYFn1,_pointY)
		_resultdraw := 1
	else if(array.get(arrayYFn1,0) >= array.get(arrayYFn1,1) and _pointY >= array.get(arrayYFn1,0) and (_pointY >= array.get(arrayYFn1,0) or (array.get(arrayYn,0) > array.get(arrayYn,2) and array.get(arrayYn,2) > array.get(arrayYn,1)) or (array.get(arrayYn,0) > array.get(arrayYn,1) and array.get(arrayYn,1) > array.get(arrayYn,2) and array.get(arrayYn,2) > array.get(arrayYn,3))))
		array.set(arrayXFn1, 0, _pointX)
		array.set(arrayYFn1, 0, _pointY)
		_resultdraw := 2
	else if(array.get(arrayYFn1,0) <= array.get(arrayYFn1,1) and _pointY <= array.get(arrayYFn1,0) and (_pointY <= array.get(arrayYFn1,0) or (array.get(arrayYn,0) < array.get(arrayYn,2) and array.get(arrayYn,2) < array.get(arrayYn,1)) or (array.get(arrayYn,0) < array.get(arrayYn,1) and array.get(arrayYn,1) < array.get(arrayYn,2) and array.get(arrayYn,2) < array.get(arrayYn,3))))
		array.set(arrayXFn1, 0, _pointX)
		array.set(arrayYFn1, 0, _pointY)
		_resultdraw := 2
	[_resultdraw]

f_CalculateSFn1(_pointX,_pointY,_arrayMark,_mIdxMark,arraySXFn1,arraySYFn1)=>
	int _resultdraw = 0
	if(array.get(_arrayMark,_mIdxMark) == 0)
		if((array.get(arraySYFn1,0) >= array.get(arraySYFn1,1) and _pointY >= array.get(arraySYFn1,0)) or (array.get(arraySYFn1,0) <= array.get(arraySYFn1,1) and _pointY <= array.get(arraySYFn1,0)))
			array.set(arraySXFn1, 0, _pointX)
			array.set(arraySYFn1, 0, _pointY)
			_resultdraw := 2
		else if((array.get(arraySYFn1,0) >= array.get(arraySYFn1,1) and _pointY < array.get(arraySYFn1,1)) or (array.get(arraySYFn1,0) <= array.get(arraySYFn1,1) and _pointY > array.get(arraySYFn1,1)))
			array.unshift(arraySXFn1,_pointX)
			array.unshift(arraySYFn1,_pointY)
			_resultdraw := 1
		else if((array.get(arraySYFn1,0) >= array.get(arraySYFn1,1) and _pointY < array.get(arraySYFn1,0) and _pointY > array.get(arraySYFn1,1)) or (array.get(arraySYFn1,0) <= array.get(arraySYFn1,1) and _pointY > array.get(arraySYFn1,0) and _pointY < array.get(arraySYFn1,1)))
			array.unshift(arraySXFn1,_pointX)
			array.unshift(arraySYFn1,_pointY)
			array.set(_arrayMark,_mIdxMark,_pointY)
			_resultdraw := 1
	else if(array.get(_arrayMark,_mIdxMark) > 0)
		if((array.get(arraySYFn1,0) >= array.get(arraySYFn1,1) and _pointY < array.get(arraySYFn1,1)) or (array.get(arraySYFn1,0) <= array.get(arraySYFn1,1) and _pointY > array.get(arraySYFn1,1)))
			array.unshift(arraySXFn1,_pointX)
			array.unshift(arraySYFn1,_pointY)
			array.set(_arrayMark,_mIdxMark,0)
			_resultdraw := 1
		else if((array.get(arraySYFn1,0) >= array.get(arraySYFn1,1) and _pointY > array.get(arraySYFn1,2)) or (array.get(arraySYFn1,0) <= array.get(arraySYFn1,1) and _pointY < array.get(arraySYFn1,2)))
			array.set(arraySXFn1, 0, _pointX)
			array.set(arraySYFn1, 0, _pointY)
			array.set(_arrayMark,_mIdxMark,0)
			_resultdraw := 2
		else if((array.get(arraySYFn1,0) >= array.get(arraySYFn1,1) and _pointY <= array.get(arraySYFn1,2) and _pointY >= array.get(arraySYFn1,0)) or (array.get(arraySYFn1,0) <= array.get(arraySYFn1,1) and _pointY >= array.get(arraySYFn1,2) and _pointY <= array.get(arraySYFn1,0)))
			array.set(arraySXFn1, 0, _pointX)
			array.set(arraySYFn1, 0, _pointY)
			array.set(_arrayMark,_mIdxMark,_pointY)
			_resultdraw := 2

	[_resultdraw]

f_CalculateRemoveDuplicateLine(arrayLine,arraySLine)=>
	if(array.size(arraySLine) > 1 and array.size(arrayLine) >1)
		if(line.get_y1(array.get(arraySLine,1)) == line.get_y1(array.get(arrayLine,1)) and line.get_y2(array.get(arraySLine,1)) == line.get_y2(array.get(arrayLine,1))and line.get_x1(array.get(arraySLine,1)) == line.get_x1(array.get(arrayLine,1)) and line.get_x2(array.get(arraySLine,1)) == line.get_x2(array.get(arrayLine,1)))
			line.delete(array.get(arrayLine,1))
			array.remove(arrayLine,1)

f_CalculateChoCh(arraySXFn1,arraySYFn1) =>
	int _X = 0
	float _Y = 0
	// ChoCh Trường hợp chữ N ngược, chữ N
	if((array.get(arraySYFn1,3) > array.get(arraySYFn1,2) and array.get(arraySYFn1,3) < array.get(arraySYFn1,1) and array.get(arraySYFn1,0) < array.get(arraySYFn1,2)) or (array.get(arraySYFn1,3) < array.get(arraySYFn1,2) and array.get(arraySYFn1,3) > array.get(arraySYFn1,1) and array.get(arraySYFn1,0) > array.get(arraySYFn1,2)))
		_X := array.get(arraySXFn1,2)
		_Y := array.get(arraySYFn1,2)
	[_X,_Y]
	

f_CalculateDrawF(_drawF,_showSF,arrayLine,arrayX,arrayY,showChoCh,arrayMChoCh,idxChoCh,_color) =>
	if(_drawF > 0)
		if(_drawF == 1)
			array.unshift(arrayLine,line.new(array.get(arrayX,1),array.get(arrayY,1),array.get(arrayX,0),array.get(arrayY,0), color = _color,xloc = xloc.bar_time,width = dottedLineWidth,style = line.style_dotted))
		else if(_drawF == 2 and array.size(arrayLine) >0)
			line.set_xy2(array.get(arrayLine,0),array.get(arrayX,0),array.get(arrayY,0))
		[XChoCh,YChoCh] = f_CalculateChoCh(arrayX,arrayY)
		if(showChoCh and YChoCh >0 and array.get(arrayMChoCh,idxChoCh) != YChoCh)
			array.set(arrayMChoCh,idxChoCh,YChoCh)
			line.new(XChoCh,YChoCh,time,YChoCh, color = _color,xloc = xloc.bar_time,width = dottedLineWidth,style = line.style_dotted)
	
f_CalculateDrawSF(_drawSF,arrayLine,arraySLine,arraySX,arraySY,showChoCh,arrayMChoCh,idxChoCh,_color) =>
	if(_drawSF > 0)
		if(_drawSF == 1)
			array.unshift(arraySLine,line.new(array.get(arraySX,1),array.get(arraySY,1),array.get(arraySX,0),array.get(arraySY,0), color = _color,xloc = xloc.bar_time,width = solidLineWidth))
		else if(_drawSF == 2 and array.size(arraySLine) >0)
			// hehe
			//log.info("{0} {1} {2} {3}", array.get(arraySX,0), array.get(arraySX,1), array.get(arraySY,0), array.get(arraySY,1))
			line.set_xy2(array.get(arraySLine,0),array.get(arraySX,0),array.get(arraySY,0))
		f_CalculateRemoveDuplicateLine(arrayLine,arraySLine)
		[XChoChS,YChoChS] = f_CalculateChoCh(arraySX,arraySY)

		if(showChoCh and YChoChS >0 and array.get(arrayMChoCh,idxChoCh) != YChoChS)
			array.set(arrayMChoCh,idxChoCh,YChoChS)
			line.new(XChoChS,YChoChS,time,YChoChS, color = _color,xloc = xloc.bar_time,width = dashedLineWidth,style = line.style_dashed)

var arrayMarkGannML = array.new_float(3,0)
var arrayMarkChoChGannML = array.new_float(6,0)
var arrayXF0GannML = array.new_int(5,time)
var arrayYF0GannML = array.new_float(5,close)
var arrayXF1GannML = array.new_int(5,time)
var arrayYF1GannML = array.new_float(5,close)
var arrayLineF1GannML = array.new_line()
var arraySXF1GannML = array.new_int(5,time)
var arraySYF1GannML = array.new_float(5,close)
var arraySLineF1GannML = array.new_line()


var arrayLineMiddlePoint = array.new_line(50)

f_CalculateAndDrawFn1(_pointX,_pointY) =>
	//F0 : Song cua nen
	array.unshift(arrayXF0GannML,_pointX)
	array.unshift(arrayYF0GannML,_pointY)
	//F1,F2,...: Song cua song theo Gann
	if(showF1GannML or showF2GannML or showF3GannML or showSF1GannML or showSF2GannML or showSF3GannML)
		[drawF1] = f_CalculateFn1(_pointX,_pointY,arrayXF0GannML,arrayYF0GannML,arrayXF1GannML,arrayYF1GannML)
		f_CalculateDrawF(showF1GannML?drawF1:0,showSF1GannML,arrayLineF1GannML,arrayXF1GannML,arrayYF1GannML,showChoChF1GannML,arrayMarkChoChGannML,0,colorF1GannML)
		if(drawF1 > 0 and (showF2GannML or showF3GannML or showSF1GannML or showSF2GannML or showSF3GannML))
			[drawSF1] = f_CalculateSFn1(_pointX,_pointY,arrayMarkGannML,0,arraySXF1GannML,arraySYF1GannML)
			f_CalculateDrawSF(showSF1GannML?drawSF1:0,arrayLineF1GannML,arraySLineF1GannML,arraySXF1GannML,arraySYF1GannML,showChoChSF1GannML,arrayMarkChoChGannML,1,colorF1GannML)

f_CalculateAndDraw(_pointX,_pointY1,_pointY2) =>
	if((array.get(arrayYF0GannML,0) > _pointY1 and array.get(arrayYF0GannML,0) > _pointY2) or (array.get(arrayYF0GannML,0) < _pointY1 and array.get(arrayYF0GannML,0) < _pointY2))
		f_CalculateAndDrawFn1(time,array.get(arrayYF0GannML,1))
	f_CalculateAndDrawFn1(time,_pointY1)
	f_CalculateAndDrawFn1(time,_pointY2)
	

highPrev = high
lowPrev = low

if barstate.isconfirmed
	if((pullbackWithCloseBar ? close : high) > highPrev[1] and low > lowPrev[1])
		f_CalculateAndDraw(time,customLow,customHigh)
	else if(high < highPrev[1] and (pullbackWithCloseBar ? close : low) < lowPrev[1])
		f_CalculateAndDraw(time,customHigh,customLow)
	else if((close >= highPrev[1] and low < lowPrev[1]) or (high > highPrev[1] and close <= lowPrev[1]))
		if(close > open)
			f_CalculateAndDraw(time,customLow,customHigh)
		else
			f_CalculateAndDraw(time,customHigh,customLow)
	// else if (high <= highPrev[1] or low >= lowPrev[1]) 
	// // // else if(high[0] <= highPrev[1] and low[0] >= lowPrev[1]) // else if(customHigh[0] <= highPrev[1] and customLow[0] >= lowPrev[1])
	// 	highPrev := highPrev[1]
	// 	lowPrev := lowPrev[1]

	if ((high - minErrorMeasurementPointsHighsLows) <= highPrev[1] and (low + minErrorMeasurementPointsHighsLows) >= lowPrev[1])
		highPrev := highPrev[1]
		lowPrev := lowPrev[1]
	

confirmed_line_to = array.get(arraySXF1GannML,0)
confirmed_line_from = array.get(arraySXF1GannML,2)
confirmed_value0 = array.get(arraySYF1GannML,0)
confirmed_value1 = array.get(arraySYF1GannML,1)
confirmed_value2 = array.get(arraySYF1GannML,2)
confirmed_value3 = array.get(arraySYF1GannML,3)
confirmed_value4 = array.get(arraySYF1GannML,4)

mid_level = (confirmed_value1 + confirmed_value2) / 2

bull_market = (customHigh[1] > confirmed_value1) and (customHigh[1] > confirmed_value2)
bear_market = (customLow[1] < confirmed_value1) and (customLow[1] < confirmed_value2)

bullBosFlipConfirmationCandleValue = ((useWicksForFlip ? high : close) - (useMeasurementPointsErrorsForBosDrawings ? minErrorMeasurementPoints : 0))
bearBosFlipConfirmationCandleValue = ((useWicksForFlip ? low : close) + (useMeasurementPointsErrorsForBosDrawings ? minErrorMeasurementPoints : 0))

bullBOS = confirmed_value0 > confirmed_value2 and confirmed_value0 > confirmed_value1 and ( bullBosFlipConfirmationCandleValue > confirmed_value2) and barstate.isconfirmed
bearBOS = confirmed_value0 < confirmed_value2 and confirmed_value0 < confirmed_value1 and ( bearBosFlipConfirmationCandleValue < confirmed_value2) and barstate.isconfirmed

market_direction_color = bull_market ? bullColor : bearColor

prevBullishBOSbar = ta.barssince(bullBOS)
prevBearishBOSbar = ta.barssince(bearBOS)
bull_market_state = prevBearishBOSbar > prevBullishBOSbar
market_state_color = bull_market_state ? bullColor : bearColor
//log.info("{0} {1} {2}", prevBullishBOSbar, prevBearishBOSbar, prevBearishBOSbar > prevBullishBOSbar)

// log.info("{0} {1} {2} {3} {4} {5}", bullBOS, bearBOS, confirmed_value0, confirmed_value1, confirmed_value2)

// drawings
if drawMiddleLine and (bullBOS or bearBOS)
	arraySize = array.size(arrayLineMiddlePoint)
	lastLineElement = array.get(arrayLineMiddlePoint, arraySize - 1)

	if na(lastLineElement) or (lastLineElement.get_x1() != confirmed_line_from)
		newLine = line.new(confirmed_line_from, mid_level, confirmed_line_to + middlelineLength * 1000 * timeframe.in_seconds(timeframe.period), mid_level, xloc = xloc.bar_time, color = market_state_color, width = solidLineWidth)
		array.push(arrayLineMiddlePoint, newLine)


if drawRectangles and (bullBOS or bearBOS)
	left = array.get(arraySXF1GannML, 2)

	if left != left[1] // do not draw the same rectangle x times
		right = array.get(arraySXF1GannML, 1)
		top = bull_market ? confirmed_value2 : confirmed_value1
		bottom = bull_market ? confirmed_value1 : confirmed_value2
		boxBgColor = color.new(market_state_color, rectangleOpacity)
		box.new(left = left, top = top, right = right, bottom = bottom, xloc=xloc.bar_time, bgcolor = boxBgColor, border_color = boxBgColor)

plotshape(drawMarketDirection, title='MarketDirection', color=market_state_color, style=shape.square, location=location.top, size=size.small, text='')
