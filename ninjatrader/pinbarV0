#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

//This namespace holds Strategies in this folder and is required. Do not change it. 
namespace NinjaTrader.NinjaScript.Strategies
{
	public class PinBarV1WithProfitTrail : Strategy
	{
		private SMA maSlow;
		private EMA maMedium;
		private EMA maFast;
		
		private double open;
		private double close;
		private double low;
		private double high;
		
		private double slowSMA;
		private double medmEMA;
		private double fastEMA;
		
		private bool bullishPinBar;
		private bool bearishPinBar;
		
		private bool fanUpTrend;
		private bool fanDnTrend;
		
		private bool bullPierce;
		private bool bearPierce;
		
		private bool longEntry;
		private bool shortEntry;
		
		protected override void OnStateChange()
		{
			if (State == State.SetDefaults)
			{
				Description									= @"Enter the description for your new custom Strategy here.";
				Name										= "PinBarV1WithProfitTrail";
				Calculate									= Calculate.OnBarClose;
				EntriesPerDirection							= 1;
				EntryHandling								= EntryHandling.AllEntries;
				IsExitOnSessionCloseStrategy				= true;
				ExitOnSessionCloseSeconds					= 30;
				IsFillLimitOnTouch							= false;
				MaximumBarsLookBack							= MaximumBarsLookBack.TwoHundredFiftySix;
				OrderFillResolution							= OrderFillResolution.Standard;
				Slippage									= 0;
				StartBehavior								= StartBehavior.WaitUntilFlat;
				TimeInForce									= TimeInForce.Gtc;
				TraceOrders									= false;
				RealtimeErrorHandling						= RealtimeErrorHandling.StopCancelClose;
				StopTargetHandling							= StopTargetHandling.PerEntryExecution;
				BarsRequiredToTrade							= 20;
				// Disable this property for performance gains in Strategy Analyzer optimizations
				// See the Help Guide for additional information
				IsInstantiatedOnEachOptimizationIteration	= false;
				
				Slow		= 25;
				Medium		= 10;
				Fast		= 2;
				
				pinbarConfirmationValue = 0.24;
				
				profitTargetTicks = 22;
				stopLossTicks = 26;
				//trailingStopLossTicks = 20;
				profitTrailOffsetTicks = 4;
			}
			else if (State == State.Configure)
			{
				SetStopLoss(CalculationMode.Ticks, stopLossTicks);
				//SetProfitTarget(CalculationMode.Ticks, profitTaker);
				//SetTrailStop(CalculationMode.Ticks, trailingStopLoss);
			}
			else if (State == State.DataLoaded)
			{
				maSlow = SMA(Slow);
				maMedium = EMA(Medium);
				maFast = EMA(Fast);

				maSlow.Plots[0].Brush = Brushes.SeaGreen;
				maMedium.Plots[0].Brush = Brushes.AliceBlue;
				maFast.Plots[0].Brush = Brushes.Goldenrod;

				AddChartIndicator(maSlow);
				AddChartIndicator(maMedium);
				AddChartIndicator(maFast);
			}
		}

		protected override void OnBarUpdate()
		{
			if (Position.MarketPosition != MarketPosition.Flat) {
    			if (Position.GetUnrealizedProfitLoss(PerformanceUnit.Ticks, Close[0]) > profitTargetTicks) {
        			SetStopLoss(CalculationMode.Ticks, profitTrailOffsetTicks);
				}
			}
			
			
			
			
			if (CurrentBar < BarsRequiredToTrade)
				return;
			
			maSlow = SMA(Slow);
			maMedium = EMA(Medium);
			maFast = EMA(Fast);
			
			slowSMA = maSlow[0];
			medmEMA = maMedium[0];
			fastEMA = maFast[0];
			
			open = Open[0];
			close = Close[0];
			low = Low[0];
			high = High[0];
					
			bullishPinBar = close > open && open - low > pinbarConfirmationValue * (high - low) || close < open && close - low > pinbarConfirmationValue * (high - low);
			bearishPinBar = close > open && high - close > pinbarConfirmationValue * (high - low) || close < open && high - open > pinbarConfirmationValue * (high - low);

			fanUpTrend = fastEMA > medmEMA && medmEMA > slowSMA;
			fanDnTrend = fastEMA < medmEMA && medmEMA < slowSMA;
			
			bullPierce = low < fastEMA && open > fastEMA && close > fastEMA || low < medmEMA && open > medmEMA && close > medmEMA || low < slowSMA && open > slowSMA && close > slowSMA;
			bearPierce = high > fastEMA && open < fastEMA && close < fastEMA || high > medmEMA && open < medmEMA && close < medmEMA || high > slowSMA && open < slowSMA && close < slowSMA;

			longEntry = fanUpTrend && bullishPinBar && bullPierce;
			shortEntry = fanDnTrend && bearishPinBar && bearPierce;
			
			if (longEntry)
				EnterLong();
			
			if (shortEntry)
				EnterShort();
		}
		
		
		
		#region Properties
		[Range(1, int.MaxValue), NinjaScriptProperty]
		[Display(ResourceType = typeof(Custom.Resource), Name = "Slow", GroupName = "NinjaScriptStrategyParameters", Order = 0)]
		public int Slow
		{ get; set; }
		
		[Range(1, int.MaxValue), NinjaScriptProperty]
		[Display(ResourceType = typeof(Custom.Resource), Name = "Medium", GroupName = "NinjaScriptStrategyParameters", Order = 1)]
		public int Medium
		{ get; set; }
		
		[Range(1, int.MaxValue), NinjaScriptProperty]
		[Display(ResourceType = typeof(Custom.Resource), Name = "Fast", GroupName = "NinjaScriptStrategyParameters", Order = 2)]
		public int Fast
		{ get; set; }
		
		[Range(0.01, 1), NinjaScriptProperty]
		[Display(ResourceType = typeof(Custom.Resource), Name = "Pinbar Confirmation Value", GroupName = "NinjaScriptStrategyParameters", Order = 3)]
		public double pinbarConfirmationValue
		{ get; set; }
		
		[NinjaScriptProperty]
		[Range(2, 1024)]
		[Display(Name="Profit Trail Trigger Ticks", Description="Take Profit Ticks", Order=9, GroupName="Parameters")]
		public int profitTargetTicks
		{ get; set; }			
			
		[NinjaScriptProperty]
		[Range(1, 1024)]
		[Display(Name="Stop Loss Ticks", Description="Stop Loss Ticks", Order=10, GroupName="Parameters")]
		public int stopLossTicks
		{ get; set; }			
			
		[NinjaScriptProperty]
		[Range(1, 1024)]
		[Display(Name="Profit Trail Offset Ticks", Description="Profit Trail Offset Ticks", Order=11, GroupName="Parameters")]
		public int profitTrailOffsetTicks
		{ get; set; }
		#endregion
		
		}
}
