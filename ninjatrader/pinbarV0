#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

//This namespace holds Strategies in this folder and is required. Do not change it. 
namespace NinjaTrader.NinjaScript.Strategies
{
	public class PinBarV0 : Strategy
	{
		private SMA maSlow;
		private EMA maMedium;
		private EMA maFast;
		
		private double open;
		private double close;
		private double low;
		private double high;
		
		private bool bullishPinBar;
		private bool bearishPinBar;
		
		private bool fanUpTrend;
		private bool fanDnTrend;
		
		protected override void OnStateChange()
		{
			if (State == State.SetDefaults)
			{
				Description									= @"Enter the description for your new custom Strategy here.";
				Name										= "PinBarV0";
				Calculate									= Calculate.OnBarClose;
				EntriesPerDirection							= 1;
				EntryHandling								= EntryHandling.AllEntries;
				IsExitOnSessionCloseStrategy				= true;
				ExitOnSessionCloseSeconds					= 30;
				IsFillLimitOnTouch							= false;
				MaximumBarsLookBack							= MaximumBarsLookBack.TwoHundredFiftySix;
				OrderFillResolution							= OrderFillResolution.Standard;
				Slippage									= 0;
				StartBehavior								= StartBehavior.WaitUntilFlat;
				TimeInForce									= TimeInForce.Gtc;
				TraceOrders									= false;
				RealtimeErrorHandling						= RealtimeErrorHandling.StopCancelClose;
				StopTargetHandling							= StopTargetHandling.PerEntryExecution;
				BarsRequiredToTrade							= 20;
				// Disable this property for performance gains in Strategy Analyzer optimizations
				// See the Help Guide for additional information
				IsInstantiatedOnEachOptimizationIteration	= false;
				
				Slow		= 25;
				Medium		= 10;
				Fast		= 2;
				
				pinbarConfirmationValue = 0.24;
				
			}
			else if (State == State.DataLoaded)
			{
				maSlow = SMA(Slow);
				maMedium = EMA(Medium);
				maFast = EMA(Fast);

				maSlow.Plots[0].Brush = Brushes.SeaGreen;
				maMedium.Plots[0].Brush = Brushes.AliceBlue;
				maFast.Plots[0].Brush = Brushes.Goldenrod;

				AddChartIndicator(maSlow);
				AddChartIndicator(maMedium);
				AddChartIndicator(maFast);
			}
		}

		protected override void OnBarUpdate()
		{
			if (CurrentBar < BarsRequiredToTrade)
				return;
			
			maSlow = SMA(Slow);
			maMedium = EMA(Medium);
			maFast = EMA(Fast);
			
			open = Open[0];
			close = Close[0];
			low = Low[0];
			high = High[0];
					
			bullishPinBar = close > open && open - low > pinbarConfirmationValue * (high - low) || close < open && close - low > pinbarConfirmationValue * (high - low);
			bearishPinBar = close > open && high - close > pinbarConfirmationValue * (high - low) || close < open && high - open > pinbarConfirmationValue * (high - low);

			fanUpTrend = maFast[0] > maMedium[0] && maMedium[0] > maSlow[0];
			fanDnTrend = maFast[0] < maMedium[0] && maMedium[0] < maSlow[0];
		}
		
		
		
		#region Properties
		[Range(1, int.MaxValue), NinjaScriptProperty]
		[Display(ResourceType = typeof(Custom.Resource), Name = "Slow", GroupName = "NinjaScriptStrategyParameters", Order = 0)]
		public int Slow
		{ get; set; }
		
		[Range(1, int.MaxValue), NinjaScriptProperty]
		[Display(ResourceType = typeof(Custom.Resource), Name = "Medium", GroupName = "NinjaScriptStrategyParameters", Order = 1)]
		public int Medium
		{ get; set; }
		
		[Range(1, int.MaxValue), NinjaScriptProperty]
		[Display(ResourceType = typeof(Custom.Resource), Name = "Fast", GroupName = "NinjaScriptStrategyParameters", Order = 2)]
		public int Fast
		{ get; set; }
		
		[Range(0.01, 1), NinjaScriptProperty]
		[Display(ResourceType = typeof(Custom.Resource), Name = "Pinbar Confirmation Value", GroupName = "NinjaScriptStrategyParameters", Order = 3)]
		public double pinbarConfirmationValue
		{ get; set; }
		#endregion
	}
}
